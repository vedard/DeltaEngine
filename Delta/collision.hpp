#pragma once

#include <algorithm>
#include <vector>
#include "body.hpp"
#include "math/projection.hpp"
#include "math/vector.hpp"
#include "math/edge.hpp"
#include "shapes/circle.hpp"
#include "shapes/shape.hpp"
#include "world.hpp"

namespace dt {

class World;

class Collision {
   public:
    Body* A;
    Body* B;

    // The direction of the collision
    Vector normal;

    // Lists of point of contacts
    VectorList contacts;

    // The amount of penetration (meters)
    float penetration;

    // Average coefficient from the bodies
    float coefficient_restitution;
    float coefficient_static_friction;
    float coefficient_kinetic_friction;

    Collision(Body* a, Body* b);

    // Check if there is a collision between the two bodies
    bool Detect();

    // Update velocity from the impulse generated by the collision
    void SolveVelocity();

    // Seperate the bodies
    void SolvePosition();

   private:
    bool BroadDetection();
    bool NarrowDetection();
    bool CircleCircleDetection(Circle* shape_a, Circle* shape_b);
    bool PolygonPolygonDetection(Shape* shape_a, Shape* shape_b);

};

}